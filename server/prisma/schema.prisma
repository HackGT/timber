generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum AssignmentStatus {
  QUEUED
  STARTED
  COMPLETED
  SKIPPED
}

enum UserRole {
  GENERAL
  SPONSOR
  ADMIN
}

model Assignment {
  id          Int              @id @default(autoincrement())
  user        User             @relation(fields: [userId], references: [id])
  project     Project          @relation(fields: [projectId], references: [id])
  status      AssignmentStatus
  priority    Int?
  categoryIds Int[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now())

  userId    Int
  projectId Int
  @@map("assignment")
}

model Ballot {
  id        Int      @id @default(autoincrement())
  project   Project  @relation(fields: [projectId], references: [id])
  criteria  Criteria @relation(fields: [criteriaId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  score     Int
  round     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deleted   Boolean  @default(false)

  projectId  Int
  criteriaId Int
  userId     Int
  @@map("ballot")
}

model Category {
  id             Int             @id @default(autoincrement())
  name           String
  isDefault      Boolean         @default(false)
  description    String
  categoryGroups CategoryGroup[]
  criterias      Criteria[]
  projects       Project[]
  hackathon      Hackathon       @relation(fields: [hackathonId], references: [id])

  hackathonId Int
  @@map("category")
}

model CategoryGroup {
  id         Int        @id @default(autoincrement())
  name       String
  categories Category[]
  hackathon  Hackathon  @relation(fields: [hackathonId], references: [id])
  users      User[]

  hackathonId Int
  @@map("category_group")
}

model Config {
  id                      Int       @id @default(autoincrement())
  currentRound            Int       @default(1)
  currentExpo             Int       @default(1)
  currentHackathon        Hackathon @relation(fields: [currentHackathonId], references: [id])
  isJudgingOn             Boolean   @default(false)
  isProjectsPublished     Boolean   @default(false)
  isProjectSubmissionOpen Boolean   @default(true)
  isDevpostCheckingOn     Boolean   @default(true)

  currentHackathonId Int
  @@map("config")
}

model Criteria {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  minScore    Int
  maxScore    Int
  category    Category @relation(fields: [categoryId], references: [id])
  ballots     Ballot[]
  rubrics     Rubric[]

  categoryId Int
  @@map("criteria")
}

model Hackathon {
  id             Int             @id @default(autoincrement())
  name           String
  imageUrl       String?
  categoryGroups CategoryGroup[]
  categories     Category[]
  notifications  Notification[]
  tableGroups    TableGroup[]
  projects       Project[]
  config         Config?

  @@map("hackathon")
}

model Notification {
  id        Int       @id @default(autoincrement())
  header    String
  message   String
  sender    User      @relation(fields: [senderId], references: [id])
  hackathon Hackathon @relation(fields: [hackathonId], references: [id])
  sentAt    DateTime  @default(now())

  senderId    Int
  hackathonId Int
  @@map("notification")
}

model Project {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  devpostUrl  String?
  githubUrl   String
  roomUrl     String?
  expo        Int?         @default(1)
  round       Int?         @default(1)
  table       Int?
  tableGroup  TableGroup?  @relation(fields: [tableGroupId], references: [id])
  hackathon   Hackathon    @relation(fields: [hackathonId], references: [id])
  members     User[]
  categories  Category[]
  ballots     Ballot[]
  assignment  Assignment[]

  tableGroupId Int?
  hackathonId  Int
  @@map("project")
}

model Rubric {
  id          Int      @id @default(autoincrement())
  score       Int
  description String
  criteria    Criteria @relation(fields: [criteriaId], references: [id])

  criteriaId Int
  @@map("rubric")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime

  @@map("session")
}

model TableGroup {
  id        Int       @id @default(autoincrement())
  name      String
  shortCode String
  color     String
  projects  Project[]
  hackathon Hackathon @relation(fields: [hackathonId], references: [id])
  tableSize Int

  hackathonId Int
  @@map("table_group")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  uuid          String?        @unique
  token         String?
  role          UserRole       @default(GENERAL)
  isJudging     Boolean        @default(false)
  categoryGroup CategoryGroup? @relation(fields: [categoryGroupId], references: [id])
  ballots       Ballot[]
  projects      Project[]
  assignments   Assignment[]
  notifications Notification[]

  categoryGroupId Int?
  @@map("user")
}
